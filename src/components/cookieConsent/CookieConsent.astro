---
// CookieConsent.astro - Minimalistisches Cookie-Banner nur für Marketing-Cookies
export interface Props {
    privacyPolicyUrl?: string;
}

const { privacyPolicyUrl = "/privacy-policy" } = Astro.props;
---

<!-- Cookie Consent Banner -->
<div
    id="cookie-consent-banner"
    class="fixed bottom-4 right-4 max-w-sm w-full sm:w-96 bg-neutral-800 shadow-2xl border border-neutral-700 rounded-lg p-4 z-50 transform translate-x-full transition-all duration-500 ease-out opacity-0 pointer-events-none"
    aria-live="polite"
    aria-label="Cookie-Einstellungen"
>
    <div class="space-y-3">
        <div class="flex items-start justify-between">
            <h3 class="text-lg font-bold">Cookie-Einstellungen</h3>
            <button
                id="close-banner"
                class="text-neutral-400 hover:text-neutral-300 ml-2"
                aria-label="Banner schließen"
            >
                <i class="ti ti-x text-lg"></i>
            </button>
        </div>

        <div class="text-sm space-y-2">
            <p>
                Wir verwenden ausschließlich technisch notwendige Cookies für
                den Betrieb der Website. Externe Medieninhalte (Spotify,
                YouTube) werden erst nach Ihrer Zustimmung geladen.
            </p>
            <p class="text-xs text-neutral-400">
                Mit einem Klick auf "Externe Medien erlauben" stimmen Sie zu,
                dass Drittanbieter wie Spotify und YouTube Cookies setzen und
                Daten über Ihre Nutzung sammeln können.
            </p>
        </div>

        <div class="flex flex-col gap-2">
            <button
                id="accept-media"
                class="px-4 py-2 bg-neutral-700 hover:bg-neutral-600 text-white rounded-lg font-medium text-sm transition-colors duration-200"
                aria-label="Externe Medien erlauben"
            >
                Externe Medien erlauben
            </button>
            <button
                id="reject-media"
                class="px-4 py-2 bg-neutral-700 hover:bg-neutral-600 text-white rounded-lg font-medium text-sm transition-colors duration-200"
                aria-label="Externe Medien ablehnen"
            >
                Ablehnen
            </button>
        </div>
        <a
            href={privacyPolicyUrl}
            class="hover:underline text-xs text-neutral-400"
        >
            Datenschutzerklärung
        </a>
    </div>
</div>

<!-- Cookie Settings Button -->
<button
    id="cookie-settings-button"
    class="fixed bottom-4 left-4 w-12 h-12 bg-neutral-700 hover:bg-neutral-600 text-white rounded-full shadow-lg transition-all duration-500 ease-out transform scale-0 opacity-0 pointer-events-none z-40 hover:scale-110 active:scale-95"
    aria-label="Cookie-Einstellungen öffnen"
>
    <i class="ti ti-settings text-2xl transition-transform duration-200"></i>
</button>

<script>
    class CookieManager {
        private static readonly CONSENT_COOKIE = "media_consent";
        private static readonly CONSENT_DURATION = 365;

        static hasMediaConsent(): boolean {
            return this.getCookie(this.CONSENT_COOKIE) === "true";
        }

        static setMediaConsent(allowed: boolean): void {
            const wasAllowed = this.hasMediaConsent();
            const cookieExists = this.getCookie(this.CONSENT_COOKIE) !== null;

            if (allowed) {
                this.setCookie(this.CONSENT_COOKIE, "true", this.CONSENT_DURATION);
            } else {
                this.deleteCookie(this.CONSENT_COOKIE);
                this.deleteEmbeddedMediaCookies();
                
                // Reload only when changing from allowed to rejected
                if (cookieExists && wasAllowed) {
                    this.forceReload();
                    return; // Early return to prevent event dispatch
                }
            }

            this.dispatchConsentEvent(allowed);
        }

        private static forceReload(): void {
            const rejectButton = document.getElementById("reject-media") as HTMLButtonElement;
            if (rejectButton) {
                rejectButton.textContent = "Lädt...";
                rejectButton.disabled = true;
            }
            
            setTimeout(() => window.location.reload(), 500);
        }

        private static deleteEmbeddedMediaCookies(): void {
            const cookiesToDelete = [
                // Spotify tracking only
                "sp_t", "sp_adid", "sp_ab", "sp_new_ab",
                // YouTube embed only  
                "VISITOR_INFO1_LIVE", "YSC", "GPS", "PREF"
            ];

            cookiesToDelete.forEach(name => {
                this.deleteCookie(name);
                document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 UTC;path=/;domain=.${window.location.hostname};`;
            });

            this.clearEmbeddedStorage();
            this.removeEmbeddedIframes();
        }

        private static clearEmbeddedStorage(): void {
            const storageKeys = [
                ...Object.keys(localStorage),
                ...Object.keys(sessionStorage)
            ];

            const isEmbedKey = (key: string) => 
                key.startsWith("sp_t") || key.startsWith("sp_ab") || 
                key.startsWith("yt-player") || key.includes("embed");

            storageKeys.forEach(key => {
                if (isEmbedKey(key)) {
                    try {
                        localStorage.removeItem(key);
                        sessionStorage.removeItem(key);
                    } catch (e) {
                        console.warn(`Failed to remove storage key: ${key}`, e);
                    }
                }
            });
        }

        private static removeEmbeddedIframes(): void {
            // Remove external iframes
            document.querySelectorAll(
                'iframe[src*="open.spotify.com/embed"], iframe[src*="youtube.com/embed"], iframe[src*="youtube-nocookie.com/embed"]'
            ).forEach(iframe => iframe.remove());

            // Reset Spotify player UI
            document.querySelectorAll('.spotify-iframe-container').forEach(container => {
                container.innerHTML = '';
                container.classList.add('hidden');
            });

            document.querySelectorAll('.spotify-placeholder').forEach(placeholder => {
                placeholder.classList.remove('hidden');
            });
        }

        private static dispatchConsentEvent(allowed: boolean): void {
            window.dispatchEvent(new CustomEvent("mediaConsentUpdate", { 
                detail: { allowed } 
            }));
        }

        static getCookie(name: string): string | null {
            const match = document.cookie
                .split(';')
                .find(cookie => cookie.trim().startsWith(`${name}=`));
            return match ? match.split('=')[1] : null;
        }

        private static setCookie(name: string, value: string, days: number): void {
            const expires = new Date(Date.now() + days * 24 * 60 * 60 * 1000).toUTCString();
            document.cookie = `${name}=${value};expires=${expires};path=/;SameSite=Lax`;
        }

        private static deleteCookie(name: string): void {
            const domains = ['', window.location.hostname, `.${window.location.hostname}`];
            domains.forEach(domain => {
                const domainPart = domain ? `;domain=${domain}` : '';
                document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 UTC;path=/${domainPart};`;
            });
        }
    }

    // Global access
    (window as any).CookieManager = CookieManager;

    // Enhanced UI Management with smooth transitions
    document.addEventListener("DOMContentLoaded", () => {
        const elements = {
            banner: document.getElementById("cookie-consent-banner"),
            settingsButton: document.getElementById("cookie-settings-button"),
            closeButton: document.getElementById("close-banner"),
            acceptButton: document.getElementById("accept-media"),
            rejectButton: document.getElementById("reject-media")
        };

        // Enhanced transition functions
        const showBanner = () => {
            if (!elements.banner) return;
            
            // Enable interactions and start transition
            elements.banner.classList.remove("pointer-events-none");
            elements.banner.style.display = 'block';
            
            // Force reflow before starting transition
            elements.banner.offsetHeight;
            
            // Animate in
            elements.banner.classList.remove("translate-x-full", "opacity-0");
            elements.banner.classList.add("translate-x-0", "opacity-100");
        };

        const hideBanner = () => {
            if (!elements.banner) return;
            
            // Start exit animation
            elements.banner.classList.remove("translate-x-0", "opacity-100");
            elements.banner.classList.add("translate-x-full", "opacity-0");
            
            // Disable interactions after animation starts
            setTimeout(() => {
                elements.banner?.classList.add("pointer-events-none");
            }, 100);
        };
        
        const showSettingsButton = () => {
            if (!elements.settingsButton) return;
            
            // Enable interactions
            elements.settingsButton.classList.remove("pointer-events-none");
            
            // Force reflow
            elements.settingsButton.offsetHeight;
            
            // Animate in with bounce effect
            elements.settingsButton.classList.remove("scale-0", "opacity-0");
            elements.settingsButton.classList.add("scale-100", "opacity-100");
        };
        
        const hideSettingsButton = () => {
            if (!elements.settingsButton) return;
            
            // Start exit animation
            elements.settingsButton.classList.remove("scale-100", "opacity-100");
            elements.settingsButton.classList.add("scale-0", "opacity-0");
            
            // Disable interactions after animation
            setTimeout(() => {
                elements.settingsButton?.classList.add("pointer-events-none");
            }, 100);
        };

        // Enhanced event handlers with transition coordination
        const handleBannerClose = () => {
            hideBanner();
            setTimeout(showSettingsButton, 400); // Wait for banner to fully hide
        };

        const handleAccept = () => {
            // Visual feedback
            if (elements.acceptButton) {
                elements.acceptButton.innerHTML = "Gespeichert <i class='ti ti-check ml-1'></i>";
                elements.acceptButton.classList.add("bg-green-600");
            }
            
            CookieManager.setMediaConsent(true);
            hideBanner();
            setTimeout(showSettingsButton, 400);
        };

        const handleReject = () => {
            const wasAllowed = CookieManager.hasMediaConsent();
            const cookieExists = CookieManager.getCookie("media_consent") !== null;
            const willReload = cookieExists && wasAllowed;
            
            // Visual feedback
            if (elements.rejectButton && willReload) {
                elements.rejectButton.textContent = "Lädt...";
                (elements.rejectButton as HTMLButtonElement).disabled = true;
                elements.rejectButton.classList.add("opacity-75");
            }
            
            CookieManager.setMediaConsent(false);
            hideBanner();
            
            // Only show settings button if not reloading
            if (!willReload) {
                setTimeout(showSettingsButton, 400);
            }
        };

        const handleSettingsClick = () => {
            hideSettingsButton();
            setTimeout(showBanner, 200); // Stagger the animations
        };

        // Initial state with smooth entrance
        if (!CookieManager.hasMediaConsent()) {
            setTimeout(showBanner, 1000);
        } else {
            setTimeout(showSettingsButton, 500); // Delayed entrance for better UX
        }

        // Event listeners
        elements.closeButton?.addEventListener("click", handleBannerClose);
        elements.acceptButton?.addEventListener("click", handleAccept);
        elements.rejectButton?.addEventListener("click", handleReject);
        elements.settingsButton?.addEventListener("click", handleSettingsClick);
    });
</script>
